{"version":3,"sources":["components/Card.js","components/Cards.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","Cards","robotsMap","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b53bbacb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 \">\r\n      <img src={`https://robohash.org/${props.id}?size=200x200`} alt=\"\"/>\r\n      <div>\r\n        <h2>{props.name}</h2>\r\n        <p>{props.email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cards = ( {robots} ) => {\r\n  const robotsMap = robots.map(robot => <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>)\r\n  return (\r\n    <div>\r\n      {robotsMap}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n)}\r\n\r\nexport default SearchBox;\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '700px'}}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cards from '../components/Cards';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  \r\n  componentDidMount() {\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n    if (isPending) {\r\n      return <h1>Loading...</h1>\r\n    }\r\n    return (\r\n      <div className=\"tc \">\r\n        <h1>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <Cards robots={filteredRobots} />\r\n          </ErrorBoundry>  \r\n        </Scroll>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { \r\n  CHANGE_SEARCH_FIELD, \r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n export const requestRobots = () => (dispatch) => {\r\n   dispatch({ \r\n     type: REQUEST_ROBOTS_PENDING\r\n   });\r\n   fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","import { \r\n  CHANGE_SEARCH_FIELD, \r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true});\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false});\r\n    default:\r\n      return state;\r\n\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App.js';\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons';\n// import * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots\n})\n\nconst store = \n  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}